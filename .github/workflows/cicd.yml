name: Upload Website

on:
  push:
    paths:
      - src/**
      - .github/workflows/**

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
        with:
          lfs: true
          submodules: true
      - name: Install hugo
        run: sudo apt-get install hugo
      - name: Build website
        run: hugo
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create S3 Bucket
        id: create-s3-bucket
        run: |
          if [ "${{ steps.branch-name.outputs.current_branch }}" = "main" ]; then
            BUCKET=${{ secrets.AWS_S3_BUCKET }}
          else
            BUCKET=${{ steps.branch-name.outputs.current_branch }}.${{ secrets.AWS_S3_BUCKET }}
          fi
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
            aws s3 mb s3://${BUCKET}
          fi
          echo "::set-output name=BUCKET::${BUCKET}"
      - name: Sync repo to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ steps.create-s3-bucket.outputs.BUCKET }}
          SOURCE_DIR: "public"
      - name: Rename example.com to our domain in policy.json
        run: |
          cat ${{ github.workspace }}/.github/workflows/policy.json |sed s/www.example.com/${{ steps.create-s3-bucket.outputs.BUCKET }}/g > policy.json
      - name: Make S3 bucket into a statically hosted website and apply policies
        run: |
          aws s3 website s3://${{ steps.create-s3-bucket.outputs.BUCKET }}/ --index-document index.html --error-document 404.html
          aws s3api put-bucket-policy --bucket ${{ steps.create-s3-bucket.outputs.BUCKET }} --policy file://policy.json
          aws s3api delete-public-access-block --bucket ${{ steps.create-s3-bucket.outputs.BUCKET }}
      - name: Update DNS Records
        run: |
          if ! [ "${{ steps.branch-name.outputs.current_branch }}" = "main" ]; then
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
                -H "X-Auth-Email: ${{ secrets.EMAIL }}" \
                -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_DNS_SECRET_API_TOKEN }}" \
                -H "Content-Type: application/json" \
                --data '{"type":"CNAME","name":"${{ steps.branch-name.outputs.current_branch }}","content":"${{ steps.branch-name.outputs.current_branch }}.${{ secrets.AWS_S3_BUCKET }}.s3-website.${{ secrets.AWS_REGION }}.amazonaws.com","ttl":1,"priority":10,"proxied":true}'
          fi
      - name: Purge Cloudflare cache
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "X-Auth-Email: ${{ secrets.EMAIL }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_DNS_SECRET_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
